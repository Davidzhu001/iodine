#!/usr/bin/env ruby

# this will compile Iodine and run an echo server.

# # test using:
# telnet localhost 3000

Dir.chdir(File.expand_path(File.join('..', '..'), __FILE__))
puts `rake clean`
puts `rake compile`

require 'benchmark'
$LOAD_PATH.unshift File.expand_path(File.join('..', '..', 'lib'), __FILE__)
require 'bundler/setup'
require 'iodine'

class EchoProtocol
  @timeout = 10

  def self.on_start
    puts '* Echo service is now running.'
  end

  def on_open
    puts 'New connection'
  end

  def ping
    write "-- are you there?\n"
  end

  # `on_message` is an optional alternative to the `on_data` callback.
  # `on_message` has a 1Kb buffer that recycles itself for memory optimization.
  def on_message(buffer)
    # writing will never block and will use a buffer written in C when needed.
    write 'Echo: buffer'
    puts buffer.dump
    close if buffer =~ /^bye[\r\n]/i
  end
end

# create the server object and setup any settings we might need.
Iodine.listen '3000', EchoProtocol
# server.threads = 10
# server.processes = 1
Iodine.start
