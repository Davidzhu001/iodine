#!/usr/bin/env ruby

# this will compile Iodine and run a raw sockets broadcasting (chatroom) server.

# # test using:
# telnet localhost 3000


Dir.chdir(File.expand_path(File.join('..', '..'), __FILE__))
puts `rake clean`
puts `rake compile`

require 'benchmark'
$LOAD_PATH.unshift File.expand_path(File.join('..', '..', 'lib'), __FILE__ )
require "bundler/setup"
require "iodine"

# You can add fixtures and/or initialization code here to make experimenting
# with your gem easier. You can also use a different console, if you like.

# (If you use this, don't forget to add pry to your Gemfile!)
# require "pry"
# Pry.start

# test the upgrade protocol using the ShoooProtocol
class ShoooProtocol
  def on_message buffer
    write "what do you mean - #{buffer.strip} ?!\n Shoo, away with you!"
    close
  end

end

# the broadcasting protocol
class EchoProtocol
  # `on_message` is an optional alternative to the `on_data` callback.
  # `on_message` has a 1Kb buffer that recycles itself for memory optimization.
  def on_message buffer
    # writing will never block and will use a buffer written in C when needed.
    write buffer
    puts buffer.dump
    # close will be performed only once all the data in the write buffer
    # was sent. use `force_close` to close early.
    close if buffer =~ /^bye[\r\n]/i
    upgrade ShoooProtocol if buffer =~ /^shoo[\r\n]/i
    # use buffer.dup to save the data from being recycled once we return.
    data = "Someone said: #{buffer}"
    # run asynchronous tasks with ease
    each  {|c| puts c; c.write data }
  end
end

# create the server object and setup any settings we might need.
server = Iodine.new
server.threads = 10
server.processes = 1
server.busy_msg = "To many connections, try again later."
server.protocol = EchoProtocol

b = server.on_start do
  server.run_every(1000) {puts "#{server.count} clients connected."}
  puts "We have 1 timer, and #{server.count} connections."
end

server.start
