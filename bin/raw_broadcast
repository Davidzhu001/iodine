#!/usr/bin/env ruby

# this will compile Iodine and run a raw sockets broadcasting (chatroom) server.

# # test using:
# telnet localhost 3000

Dir.chdir(File.expand_path(File.join('..', '..'), __FILE__))
puts `rake clean`
puts `rake compile`

require 'benchmark'
$LOAD_PATH.unshift File.expand_path(File.join('..', '..', 'lib'), __FILE__)
require 'bundler/setup'
require 'iodine'

# You can add fixtures and/or initialization code here to make experimenting
# with your gem easier. You can also use a different console, if you like.

# (If you use this, don't forget to add pry to your Gemfile!)
# require "pry"
# Pry.start

# test the upgrade protocol using the ShoooProtocol
class ShoooProtocol
  @timeout = 10
  def ping
    write "Wha, ya' still here?! Go away!\n"
    close
  end

  def on_message(buffer)
    write "what do you mean - #{buffer.strip} ?!\nShoo, away with you!\n"
    close
  end
end

# the broadcasting protocol
class EchoProtocol
  def self.on_start
    Iodine.run_every(1000) { puts "#{Iodine.count} clients connected." }
    puts "We have 1 timer, and #{Iodine.count} connections."
  end

  def on_open
    subscribe(channel: :chat) {|ch, msg|  write msg }
    subscribe channel: :quite
  end

  # `on_message` is an optional alternative to the `on_data` callback.
  # `on_message` has a 1Kb buffer that recycles itself for memory optimization.
  def on_message(buffer)
    # writing will never block and will use a buffer written in C when needed.
    publish channel: :chat, message: "Someone said: #{buffer}"
    switch_protocol ShoooProtocol if buffer =~ /^shoo[\r\n]/i
    write "You speak!\n" if unsubscribe(subscribed?(channel: :quite))
  end
end

# create the server object and setup any settings we might need.
Iodine.listen 3000, EchoProtocol
Iodine.threads = 10
Iodine.processes = 1
Iodine.start
