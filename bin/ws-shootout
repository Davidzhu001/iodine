#!/usr/bin/env ruby

Dir.chdir(File.expand_path(File.join('..', '..'), __FILE__))
puts `rake clean`
puts `rake compile`

require 'benchmark'
require 'json'
$LOAD_PATH.unshift File.expand_path(File.join('..', '..', 'lib'), __FILE__)
require 'bundler/setup'
require 'iodine'
require 'rack'


class ShootoutApp
  # the default HTTP response
  def self.call(env)
    if env['upgrade.websocket?'.freeze] # && env['HTTP_UPGRADE'.freeze] =~ /websocket/i
      env['upgrade.websocket'.freeze] = ShootoutApp.new
      return [0, {}, []]
    end
    out = "ENV:\r\n#{env.to_a.map { |h| "#{h[0]}: #{h[1]}" } .join "\n"}\n"
    request = Rack::Request.new(env)
    out += "\nRequest Path: #{request.path_info}\nParams:\r\n#{request.params.to_a.map { |h| "#{h[0]}: #{h[1]}" } .join "\n"}\n" unless request.params.empty?
    [200, { 'Content-Length' => out.length, 'Content-Type' => 'text/plain; charset=UTF-8;' }, [out]]
  end
  # we won't be using AutoDispatch, but directly using the `on_message` callback.
  def on_message data
    cmd, payload = JSON(data).values_at('type', 'payload')
    if cmd == 'echo'
      write({type: 'echo', payload: payload}.to_json)
    else
      msg = {type: 'broadcast', payload: payload}.to_json
      # Iodine::Websocket.each {|ws| ws.write msg}
      Iodine::Websocket.multiwrite(msg) # {|ws| true }
      write({type: "broadcastResult", payload: payload}.to_json)
    end
  end
end


# create the server object and setup any settings we might need.
Iodine.threads ||= 4
Iodine.processes ||= 1
Iodine::Rack.public = nil
Iodine::Rack.app = ShootoutApp
Iodine.start

# server.on_http= Proc.new do |env|
#   # [200, {"Content-Length".freeze => "12".freeze}, ["Hello World!".freeze]];
#   if env["HTTP_UPGRADE".freeze] =~ /websocket/i.freeze
#     env['iodine.websocket'.freeze] = WSEcho.new
#     [0,{}, []]
#   else
#     req = Rack::Request.new env
#     res = Rack::Response.new
#     res.write "Hello World!".freeze
#     res.to_a
#   end
# end

# server.on_start do
#   server.run_every(1000) {puts "#{server.connection_count} clients connected."}
# end

# puts "Press enter to start (#{Process.pid})"
# gets

# def nag
#   puts `ab -n 200000 -c 2000 -k http://127.0.0.1:3000/`
#   sleep 2
# end
#
# nag while true
#
# def nag
#   puts `wrk -c2000 -d10 -t4 http://localhost:3000/`
#   sleep 3
# end
#
# nag while true

# ab -n 100000 -c 200 -k http://127.0.0.1:3000/
# ab -n 100000 -c 4000 -k http://127.0.0.1:3000/
# ab -n 1000000 -c 20000 -k http://127.0.0.1:3000/
# ~/ruby/wrk/wrk -c400 -d10 -t12 http://localhost:3000/
# wrk -c200 -d4 -t12 http://localhost:3000/
# ab -n 2000 -c 20 -H "Connection: close" http://127.0.0.1:3000/
# RACK_ENV="production" rackup -p 3000 -s iodine

# thor --amount 5000 ws://localhost:3000/echo
# thor --amount 5000 ws://localhost:3000/broadcast

# ws = new WebSocket("ws://localhost:3000"); ws.onmessage = function(e) {console.log("Got message!"); console.log(e.data);}; ws.onclose = function(e) {console.log("closed")}; ws.onopen = function(e) {ws.send("hi");};
# for(i = 0; i< 256; i++) {
#   ws = new WebSocket("ws://localhost:3000");
#   ws.onmessage = function(e) {console.log("Got message!"); console.log(e.data); e.target.close(); };
#   ws.onclose = function(e) {console.log("closed")};
#   ws.onopen = function(e) {e.target.send("hi");};
# };
