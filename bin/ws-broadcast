#!/usr/bin/env ruby

Dir.chdir(File.expand_path(File.join('..', '..'), __FILE__))
puts `rake clean`
puts `rake compile`

require 'benchmark'
$LOAD_PATH.unshift File.expand_path(File.join('..', '..', 'lib'), __FILE__)
require 'bundler/setup'
require 'iodine'
require 'rack'

class WSEcho
  def self.call(env)
    if env['HTTP_UPGRADE'.freeze] =~ /websocket/i
      env['iodine.websocket'.freeze] = WSEcho
      return [0, {}, []]
    end
    out = "ENV:\r\n#{env.to_a.map { |h| "#{h[0]}: #{h[1]}" } .join "\n"}"
    request = Rack::Request.new(env)
    pr_raise if request.path_info =~ /raise[.]*/
    out += "\nRequest Path: #{request.path_info}\nParams:\r\n#{request.params.to_a.map { |h| "#{h[0]}: #{h[1]}" } .join "\n"}" unless request.params.empty?
    [200, { 'Content-Length' => out.length }, [out]]
  end

  def on_open
    puts 'We have a websocket connection'
  end

  def on_close
    puts "Bye Bye... only #{count} left..."
  end

  def on_shutdown
    puts "I'm shutting down #{self}"
  end

  def on_message(data)
    puts "got message: #{data}"
    write data
    data_cp = "Broadcast: #{data}"
    # puts "broadcasting #{data_cp.bytesize} bytes"
    each { |h| h.write data_cp }
  end

  def self.pr_raise
    raise 'hell'
  end
end

# create the server object and setup any settings we might need.
Iodine.threads ||= 4
Iodine.processes ||= 1
Iodine::Rack.public = nil
Iodine::Rack.log = 1
Iodine::Rack.app = WSEcho
Iodine.start

# server.on_http= Proc.new do |env|
#   # [200, {"Content-Length".freeze => "12".freeze}, ["Hello World!".freeze]];
#   if env["HTTP_UPGRADE".freeze] =~ /websocket/i.freeze
#     env['iodine.websocket'.freeze] = WSEcho.new
#     [0,{}, []]
#   else
#     req = Rack::Request.new env
#     res = Rack::Response.new
#     res.write "Hello World!".freeze
#     res.to_a
#   end
# end

# server.on_start do
#   # server.run {puts "I'm running!"}
#   # server.run_after(5000) {puts "5 seconds have passed."}
#   server.run_every(1000) { puts "#{server.count} clients connected." }
#   # server.run_every(10000) do
#   #   begin
#   #     puts "making a system call"
#   #     puts `ab -n 100000 -c 200 -k http://127.0.0.1:3000/`
#   #   rescue => e
#   #     l = Logger.new STDOUT
#   #     l.error e
#   #   end
#   # end
# end
#
# server.on_start do
#   server.run_every(1000) {puts "#{server.connection_count} clients connected."}
# end

puts "Press enter to start (#{Process.pid})"
# gets

server.start

# def nag
#   puts `ab -n 200000 -c 2000 -k http://127.0.0.1:3000/`
#   sleep 2
# end
#
# nag while true
#
# def nag
#   puts `wrk -c2000 -d10 -t4 http://localhost:3000/`
#   sleep 3
# end
#
# nag while true

# ab -n 100000 -c 200 -k http://127.0.0.1:3000/
# ab -n 100000 -c 4000 -k http://127.0.0.1:3000/
# ab -n 1000000 -c 20000 -k http://127.0.0.1:3000/
# ~/ruby/wrk/wrk -c400 -d10 -t12 http://localhost:3000/
# wrk -c200 -d4 -t12 http://localhost:3000/
# RACK_ENV="production" rackup -p 3000 -s iodine

# thor --amount 5000 ws://localhost:3000/echo
# thor --amount 5000 ws://localhost:3000/broadcast

# ws = new WebSocket("ws://localhost:3000"); ws.onmessage = function(e) {console.log("Got message!"); console.log(e.data);}; ws.onclose = function(e) {console.log("closed")}; ws.onopen = function(e) {ws.send("hi");};
# for(i = 0; i< 256; i++) {
#   ws = new WebSocket("ws://localhost:3000/");
#   ws.onmessage = function(e) {console.log("Got message!"); console.log(e.data); window.setTimeout(function(iws) {iws.send("leaving soon...");}, 3000, e.target); window.setTimeout(function(iws) {iws.close();}, 5000, e.target); };
#   ws.onclose = function(e) {console.log("closed")};
#   ws.onopen = function(e) {e.target.send("hi");};
# };
